router.get('/cart', async (req, res) => {
    const userfind = await User.find({
        _id: req.session.userId
    });
    let cart = await Cart.findOne({
        userfind
    }).populate({
        path: "userId",
        path: "cartItems",
        populate: {
            path: "productId"
        }
    });

    let items = cart.cartItems;
    console.log('cart items', items);
    //console.log('cart items prod name:', cart.cartItems.productId)
    console.log('cart details', cart);
    res.render('user/cart', {
        items
    });
})

router.get('/addtocart/:id', async (req, res) => {
    if (req.session.username) {
        console.log('req.session.username', req.session.username);
        let productId = req.params.id;
        console.log('productid', productId);
        productId = new mongoose.Types.ObjectId(productId);
        let userId = req.session.userId;
        console.log('req.session.userId', req.session.userId);
        let userExist = await Cart.findOne({
            userId
        });
        // console.log('userexist', userExist);
        if (userExist) {

            let productExist = await Cart.findOne({
                $and: [{
                    userId
                }, {
                    cartItems: {
                        $elemMatch: {
                            productId
                        }
                    }
                }]
            });
            if (productExist) {
                //await cartModel.aggregate([{$match:{$and:[{userId},{"cartItems.productId":productId}]}},{$inc:{"cartItems.$.productQuantity":1}}]);
                await Cart.findOneAndUpdate({
                    $and: [{
                        userId
                    }, {
                        "cartItems.productId": productId
                    }]
                }, {
                    $inc: {
                        "cartItems.$.productQuantity": 1
                    }
                });
                res.redirect('/user/cart');
            } else {
                await Cart.updateOne({
                    userId
                }, {
                    $push: {
                        cartItems: {
                            productId,
                            productQuantity: 1
                        }
                    }
                });
                res.redirect('/user/cart');
            }
        } else {
            let cart = new Cart({
                userId,
                cartItems: [{
                    productId,
                    productQuantity: 1
                }]
            });

            try {
                await cart.save();
            } catch (err) {
                const msg = 'cart adding failed';
                console.log('cart', cart)
                res.send({
                    msg
                });
            }
        }
        let cartCount = await Cart.aggregate([{
            $match: {
                userId
            }
        }, {
            $project: {
                count: {
                    $size: "$cartItems"
                }
            }
        }]);

        // res.send({
        //     cartCount
        // });
        console.log(cartCount);
    } else {
        const msg = 'please login to continue';
        res.send({
            msg
        });
        return;
    }

})


router.post('/addtoexistingcart', async (req, res) => {
    if (req.session.username) {
        //console.log('req.session.username', req.session.username);
        let productId = req.body.prodid;
        //console.log('productid', productId);
        productId = new mongoose.Types.ObjectId(productId);
        let userId = req.session.userId;
        //console.log('req.session.userId', req.session.userId);
        let userExist = await Cart.findOne({
            userId
        });
        // console.log('userexist', userExist);
        if (userExist) {

            let productExist = await Cart.findOne({
                $and: [{
                    userId
                }, {
                    cartItems: {
                        $elemMatch: {
                            productId
                        }
                    }
                }]
            });
            if (productExist) {
                //await cartModel.aggregate([{$match:{$and:[{userId},{"cartItems.productId":productId}]}},{$inc:{"cartItems.$.productQuantity":1}}]);
                await Cart.findOneAndUpdate({
                    $and: [{
                        userId
                    }, {
                        "cartItems.productId": productId
                    }]
                }, {
                    $inc: {
                        "cartItems.$.productQuantity": 1
                    }
                });
                res.redirect('/user/cart');
            } else {
                await Cart.updateOne({
                    userId
                }, {
                    $push: {
                        cartItems: {
                            productId,
                            productQuantity: 1
                        }
                    }
                });
                res.redirect('/user/cart');
            }
        } else {
            let cart = new Cart({
                userId,
                cartItems: [{
                    productId,
                    productQuantity: 1
                }]
            });
            cart.bill += quantity * price;
            try {
                await cart.save();
            } catch (err) {
                const msg = 'cart adding failed';
                console.log('cart', cart)
                res.send({
                    msg
                });
            }
        }
        let cartCount = await Cart.aggregate([{
            $match: {
                userId
            }
        }, {
            $project: {
                count: {
                    $size: "$cartItems"
                }
            }
        }]);

        // res.send({
        //     cartCount
        // });
        //console.log(cartCount);
    } else {
        const msg = 'please login to continue';
        res.send({
            msg
        });
        return;
    }

})
router.post('/decfromcart', async (req, res) => {
    if (req.session.username) {
        let productId = req.body.prodid;
        // console.log('decrement prodid is', productId);
        productId = new mongoose.Types.ObjectId(productId);
        let userId = req.session.userId;
        //console.log('decrement userid is', userId);
        let userExist = await Cart.findOne({
            userId
        });
        if (userExist) {
            if (userExist) {
                let productExist = await Cart.findOne({
                    $and: [{
                        userId
                    }, {
                        cartItems: {
                            $elemMatch: {
                                productId
                            }
                        }
                    }]
                });
                if (productExist) {
                    await Cart.findOneAndUpdate({
                        $and: [{
                            userId
                        }, {
                            "cartItems.productId": productId
                        }]
                    }, {
                        $inc: {
                            "cartItems.$.productQuantity": -1
                        }
                    });
                } else {
                    await cartModel.updateOne({
                        userId
                    }, {
                        $push: {
                            cartItems: {
                                productId,
                                productQuantity: 1
                            }
                        }
                    });
                }
            } else {
                const msg = 'Item failed to find';
                res.send({
                    msg
                });
                return;
            }
            let cartCount = await Cart.aggregate([{
                $match: {
                    userId
                }
            }, {
                $project: {
                    count: {
                        $size: "$cartItems"
                    }
                }
            }]);
            // res.send({
            //     cartCount
            // });
        } else {
            const msg = 'please login to continue';
            res.send({
                msg
            });
            return;
        }

    }
});


router.post('/delfromcart', async (req, res) => {
    const productId = req.body.prodid;
    console.log('productid', productId);
    const userId = req.session.userId;
    console.log('userid', userId);
    await Cart.updateOne({
        userId
    }, {
        $pull: {
            "cartItems": {
                "productId": productId
            }
        }
    });
    //  res.send({
    //      msg: 'deleted'
    //  });
})